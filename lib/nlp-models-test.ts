// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã NLP –º–æ–¥–µ–ª–µ–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
export async function testLocalEmotionAnalysis(text: string) {
  console.log(`[–¢–ï–°–¢] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: "${text}"`)

  // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const aggressionWords = [
    "–¥—É—Ä–∞–∫",
    "–∏–¥–∏–æ—Ç",
    "—Ç—É–ø–æ–π",
    "–±—Ä–µ–¥",
    "–µ—Ä—É–Ω–¥–∞",
    "—Ö–µ—Ä–Ω—è",
    "—Ñ–∏–≥–Ω—è",
    "–≥–æ–≤–Ω–æ",
    "–¥–µ—Ä—å–º–æ",
    "–º—É–¥–∞–∫",
    "–∫–æ–∑–µ–ª",
    "—É—Ä–æ–¥",
    "–∫—Ä–µ—Ç–∏–Ω",
    "–¥–µ–±–∏–ª",
    "–∑–∞—Ç–∫–Ω–∏—Å—å",
    "–æ—Ç–≤–∞–ª–∏",
    "–ø–æ—à–µ–ª",
    "–¥–æ—Å—Ç–∞–ª",
    "–Ω–∞–¥–æ–µ–ª",
    "–±–µ—Å–∏—Ç",
    "–∑–∞–¥–æ–ª–±–∞–ª",
    "–∑–∞–∫–æ–ª–µ–±–∞–ª",
    "–∑–∞–º—É—á–∏–ª",
  ]

  const stressWords = [
    "—Å—Ä–æ—á–Ω–æ",
    "–±—ã—Å—Ç—Ä–µ–µ",
    "–æ–ø—è—Ç—å",
    "–Ω–µ —É—Å–ø–µ–≤–∞–µ–º",
    "–≥–æ—Ä–∏—Ç",
    "–ø–æ–∂–∞—Ä",
    "–∞–≤—Ä–∞–ª",
    "–∑–∞–≤–∞–ª",
    "–¥–µ–¥–ª–∞–π–Ω",
    "–≤—á–µ—Ä–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ",
    "–∫–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è",
    "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "—Å–ª–æ–º–∞–ª–æ—Å—å",
    "–≥–ª—é—á–∏—Ç",
    "–ø–∞–¥–∞–µ—Ç",
    "–∫—Ä–∞—à–∏—Ç—Å—è",
    "–≤–∏—Å–Ω–µ—Ç",
    "–ª–∞–≥–∞–µ—Ç",
  ]

  const positiveWords = [
    "—Å–ø–∞—Å–∏–±–æ",
    "–æ—Ç–ª–∏—á–Ω–æ",
    "—Ö–æ—Ä–æ—à–æ",
    "–º–æ–ª–æ–¥–µ—Ü",
    "—Å—É–ø–µ—Ä",
    "—Ä–∞–¥",
    "–∫–ª–∞—Å—Å–Ω–æ",
    "–∫—Ä—É—Ç–æ",
    "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ",
    "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
    "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ",
    "—á—É–¥–µ—Å–Ω–æ",
    "–±–ª–∞–≥–æ–¥–∞—Ä—é",
    "—Ü–µ–Ω—é",
    "—É–≤–∞–∂–∞—é",
    "–ø–æ–¥–¥–µ—Ä–∂—É",
    "—Å–æ–≥–ª–∞—Å–µ–Ω",
    "–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
    "—Ç–æ—á–Ω–æ",
    "–∑–¥–æ—Ä–æ–≤–æ",
  ]

  const sarcasmWords = [
    "–∫–æ–Ω–µ—á–Ω–æ",
    "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ",
    "—Ä–∞–∑—É–º–µ–µ—Ç—Å—è",
    "—Å–∞–º–æ —Å–æ–±–æ–π",
    "–∞–≥–∞",
    "–Ω—É –¥–∞",
    "–æ—Ç–ª–∏—á–Ω–æ",
    "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
    "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ",
    "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ",
    "—á—É–¥–µ—Å–Ω–æ",
    "—Å—É–ø–µ—Ä",
  ]

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
  const lowerText = text.toLowerCase()

  let aggression = 0
  let stress = 0
  let positivity = 0
  let sarcasm = 0

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
  aggressionWords.forEach((word) => {
    if (lowerText.includes(word)) {
      aggression += 30
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ –∞–≥—Ä–µ—Å—Å–∏–∏: ${word}`)
    }
  })

  stressWords.forEach((word) => {
    if (lowerText.includes(word)) {
      stress += 25
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ —Å—Ç—Ä–µ—Å—Å–∞: ${word}`)
    }
  })

  positiveWords.forEach((word) => {
    if (lowerText.includes(word)) {
      positivity += 25
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ: ${word}`)
    }
  })

  sarcasmWords.forEach((word) => {
    if (lowerText.includes(word)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞—Ä–∫–∞–∑–º–∞
      const hasNegativeContext =
        text.includes("ü§°") ||
        text.includes("üëè") ||
        text.includes("üôÑ") ||
        text.includes("...") ||
        /–∫–æ–Ω–µ—á–Ω–æ.*üëè/.test(text) ||
        /–æ—Ç–ª–∏—á–Ω–æ.*ü§°/.test(text)

      if (hasNegativeContext) {
        sarcasm += 40
        console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∞—Ä–∫–∞–∑–º: ${word} —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º`)
      } else {
        positivity += 15
        console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ: ${word}`)
      }
    }
  })

  // –ê–Ω–∞–ª–∏–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ —ç–º–æ–¥–∑–∏
  const exclamationCount = (text.match(/!/g) || []).length
  if (exclamationCount > 2) {
    stress += exclamationCount * 15
    console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${exclamationCount} –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤`)
  }

  const upperCaseRatio = (text.match(/[–ê-–ØA-Z]/g) || []).length / text.length
  if (upperCaseRatio > 0.5) {
    aggression += 20
    console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ö–ê–ü–° (${Math.round(upperCaseRatio * 100)}% —Ç–µ–∫—Å—Ç–∞)`)
  }

  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏
  const negativeEmojis = ["üò°", "ü§¨", "üò§", "üí¢", "üëø", "üò†", "üôÑ", "ü§°", "üí©", "üñï"]
  negativeEmojis.forEach((emoji) => {
    if (text.includes(emoji)) {
      if (emoji === "ü§°" || emoji === "üôÑ") {
        sarcasm += 35
        console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–º–æ–¥–∑–∏ —Å–∞—Ä–∫–∞–∑–º–∞: ${emoji}`)
      } else {
        aggression += 25
        console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —ç–º–æ–¥–∑–∏: ${emoji}`)
      }
    }
  })

  // –°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —ç–º–æ–¥–∑–∏
  const stressEmojis = ["üò∞", "üò±", "ü§Ø", "üòµ", "üî•", "‚ö°", "üí•", "üö®"]
  stressEmojis.forEach((emoji) => {
    if (text.includes(emoji)) {
      stress += 20
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–µ—Å—Å–∞: ${emoji}`)
    }
  })

  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏
  const positiveEmojis = ["üòä", "üòÑ", "üëç", "‚úÖ", "üéâ", "üí™", "‚ù§Ô∏è", "üëè"]
  positiveEmojis.forEach((emoji) => {
    if (text.includes(emoji)) {
      positivity += 20
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —ç–º–æ–¥–∑–∏: ${emoji}`)
    }
  })

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ 100
  aggression = Math.min(100, aggression)
  stress = Math.min(100, stress)
  positivity = Math.min(100, positivity)
  sarcasm = Math.min(100, sarcasm)

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
  const toxicity = Math.min(100, aggression * 0.8 + stress * 0.4)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
  const emotions = [
    { name: "aggression", value: aggression },
    { name: "stress", value: stress },
    { name: "positivity", value: positivity },
    { name: "sarcasm", value: sarcasm },
    { name: "neutral", value: 20 }, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
  ]

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è
  emotions.sort((a, b) => b.value - a.value)

  // –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è - –ø–µ—Ä–≤–∞—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
  const dominantEmotion = emotions[0].value > 20 ? emotions[0].name : "neutral"
  const confidence = emotions[0].value

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
  let severity = "low"
  if (toxicity > 85) severity = "critical"
  else if (toxicity > 65) severity = "high"
  else if (emotions[0].value > 35) severity = "medium"

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = {
    emotion: dominantEmotion,
    confidence: confidence,
    severity: severity,
    categories: {
      aggression: aggression,
      stress: stress,
      sarcasm: sarcasm,
      toxicity: toxicity,
      positivity: positivity,
    },
    modelUsed: ["local-test"],
  }

  console.log("[–¢–ï–°–¢] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:", result)
  return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ª–µ–Ω–≥–∞
export function testSlangDetection(text: string) {
  console.log(`[–¢–ï–°–¢] –ò—â–µ–º —Å–ª–µ–Ω–≥ –≤ —Ç–µ–∫—Å—Ç–µ: "${text}"`)

  // –ú–∏–Ω–∏-—Å–ª–æ–≤–∞—Ä—å —Å–ª–µ–Ω–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
  const slangDictionary = {
    –Ω–æ—Ä–º: { category: "general", normalized: "–Ω–æ—Ä–º–∞–ª—å–Ω–æ" },
    –æ–∫: { category: "general", normalized: "—Ö–æ—Ä–æ—à–æ" },
    –∫–æ–¥–∏—Ç—å: { category: "it", normalized: "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å" },
    –¥–µ–¥–ª–∞–π–Ω: { category: "corporate", normalized: "—Å—Ä–æ–∫" },
    –º–∏—Ç–∏–Ω–≥: { category: "corporate", normalized: "–≤—Å—Ç—Ä–µ—á–∞" },
    –±–µ—Å–∏—Ç: { category: "emotional", normalized: "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç" },
    —Ñ–∏—á–∞: { category: "it", normalized: "—Ñ—É–Ω–∫—Ü–∏—è" },
    –±–∞–≥: { category: "it", normalized: "–æ—à–∏–±–∫–∞" },
    —Ñ–∏–¥–±–µ–∫: { category: "corporate", normalized: "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" },
    –∞–ø–¥–µ–π—Ç: { category: "corporate", normalized: "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" },
  }

  const lowerText = text.toLowerCase()
  const words = lowerText.split(/\s+/)
  const slangDetected = []

  // –ò—â–µ–º —Å–ª–µ–Ω–≥ –≤ —Ç–µ–∫—Å—Ç–µ
  for (const word of words) {
    const cleanWord = word.replace(/[.,!?;:()]/g, "")
    if (slangDictionary[cleanWord]) {
      const slang = slangDictionary[cleanWord]
      slangDetected.push(`${cleanWord} (${slang.category})`)
      console.log(`[–¢–ï–°–¢] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–Ω–≥: ${cleanWord} -> ${slang.normalized} (${slang.category})`)
    }
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç (–∑–∞–º–µ–Ω—è–µ–º —Å–ª–µ–Ω–≥ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
  let normalizedText = lowerText
  for (const [slang, info] of Object.entries(slangDictionary)) {
    const regex = new RegExp(`\\b${slang}\\b`, "gi")
    normalizedText = normalizedText.replace(regex, info.normalized)
  }

  return {
    originalText: text,
    normalizedText: normalizedText,
    slangDetected: slangDetected,
    slangCount: slangDetected.length,
  }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function runTests() {
  console.log("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –≠–ú–û–¶–ò–ô ===")

  const testCases = [
    "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –∑–∞ –≤–∞—Å!",
    "–ú–µ–Ω—è —ç—Ç–æ –æ—á–µ–Ω—å –±–µ—Å–∏—Ç! –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —ç—Ç–æ —Ç–µ—Ä–ø–µ—Ç—å?!",
    "–î–∞, –∫–æ–Ω–µ—á–Ω–æ, –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è... üôÑ",
    "–Ø –Ω–µ —É—Å–ø–µ–≤–∞—é –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫ –¥–µ–¥–ª–∞–π–Ω—É, —É –º–µ–Ω—è –ø–∞–Ω–∏–∫–∞!",
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ.",
    "–¢–´ –ß–¢–û –¢–í–û–†–ò–®–¨?! –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò!!!",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å, –æ—á–µ–Ω—å —Ü–µ–Ω—é! üëç",
    "–ù—É –¥–∞, –∫–æ–Ω–µ—á–Ω–æ, —Ç—ã –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤... ü§°",
  ]

  for (const testCase of testCases) {
    console.log("\n-----------------------------------")
    const emotionResult = testLocalEmotionAnalysis(testCase)
    const slangResult = testSlangDetection(testCase)
    console.log("-----------------------------------\n")
  }

  console.log("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
}
