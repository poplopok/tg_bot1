import { Bot, webhookCallback } from "grammy"
import { updateGlobalStats } from "../admin/stats/route"

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN || "")

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface EmotionAnalysis {
  emotion: string
  confidence: number
  severity: "low" | "medium" | "high" | "critical"
  categories: {
    aggression: number
    stress: number
    sarcasm: number
    toxicity: number
    positivity: number
  }
  modelUsed: string
  originalMessage?: string
}

interface UserRisk {
  userId: number
  username?: string
  riskLevel: "low" | "medium" | "high"
  incidents: number
  lastIncident?: Date
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤
const chatStats = new Map<
  number,
  {
    totalMessages: number
    emotionStats: Record<string, number>
    userRisks: Map<number, UserRisk>
    incidents: Array<{
      id: string
      userId: number
      message: string
      emotion: string
      severity: string
      timestamp: Date
    }>
  }
>()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const MODERATION_SETTINGS = {
  thresholds: {
    aggression: 75,
    stress: 80,
    sarcasm: 70,
    toxicity: 85,
  },
  autoBlock: true,
  notifyHR: true,
  hrChatId: process.env.HR_CHAT_ID ? Number.parseInt(process.env.HR_CHAT_ID) : null,
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ Hugging Face API
async function analyzeEmotionWithHuggingFace(text: string): Promise<EmotionAnalysis> {
  try {
    const model = process.env.HUGGINGFACE_MODEL || "cointegrated/rubert-tiny2-cedr-emotion-detection"
    
    const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        inputs: text,
        options: { wait_for_model: true },
      }),
    })

    if (!response.ok) {
      throw new Error(`Hugging Face API error: ${response.status}`)
    }

    const result = await response.json()
    const emotions = result[0] || []

    const emotionMapping: Record<string, keyof EmotionAnalysis["categories"]> = {
      anger: "aggression",
      disgust: "aggression",
      fear: "stress",
      sadness: "stress",
      surprise: "stress",
      joy: "positivity",
      neutral: "positivity",
    }

    const categories = {
      aggression: 0,
      stress: 0,
      sarcasm: 0,
      toxicity: 0,
      positivity: 0,
    }

    let dominantEmotion = "neutral"
    let maxConfidence = 0

    emotions.forEach((emotion: any) => {
      const category = emotionMapping[emotion.label.toLowerCase()]
      const confidence = emotion.score * 100

      if (category) {
        categories[category] = Math.max(categories[category], confidence)
      }

      if (confidence > maxConfidence) {
        maxConfidence = confidence
        dominantEmotion = emotion.label.toLowerCase()
      }
    })

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞—Ä–∫–∞–∑–º–∞
    const sarcasmScore = await detectSarcasm(text)
    categories.sarcasm = sarcasmScore

    categories.toxicity = Math.min(100, categories.aggression * 0.8 + categories.stress * 0.4)

    let severity: EmotionAnalysis["severity"] = "low"
    if (categories.toxicity > 85 || categories.aggression > 80) severity = "critical"
    else if (categories.toxicity > 65 || maxConfidence > 60) severity = "high"
    else if (maxConfidence > 35) severity = "medium"

    return {
      emotion: dominantEmotion,
      confidence: maxConfidence,
      severity,
      categories,
      modelUsed: "huggingface",
      originalMessage: text,
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ Hugging Face API:", error)
    return await analyzeEmotionLocal(text)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–∞—Ä–∫–∞–∑–º–∞
async function detectSarcasm(text: string): Promise<number> {
  try {
    const response = await fetch("https://api-inference.huggingface.co/models/cardiffnlp/twitter-roberta-base-irony", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        inputs: text,
        options: { wait_for_model: true },
      }),
    })

    if (!response.ok) {
      throw new Error(`Sarcasm detection error: ${response.status}`)
    }

    const result = await response.json()
    const ironyScore =
      result[0]?.find(
        (item: any) => item.label.toLowerCase().includes("irony") || item.label.toLowerCase().includes("sarcasm"),
      )?.score || 0

    return ironyScore * 100
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–∞—Ä–∫–∞–∑–º–∞:", error)
    return 0
  }
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ fallback
async function analyzeEmotionLocal(text: string): Promise<EmotionAnalysis> {
  const lowerText = text.toLowerCase()

  const aggressionWords = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–±—Ä–µ–¥", "–µ—Ä—É–Ω–¥–∞"]
  const stressWords = ["—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–µ–µ", "–æ–ø—è—Ç—å", "–Ω–µ —É—Å–ø–µ–≤–∞–µ–º", "–≥–æ—Ä–∏—Ç"]
  const positiveWords = ["—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–º–æ–ª–æ–¥–µ—Ü", "—Å—É–ø–µ—Ä", "—Ä–∞–¥", "–∫–ª–∞—Å—Å–Ω–æ"]

  let aggression = 0
  let stress = 0
  let positivity = 0

  aggressionWords.forEach((word) => {
    if (lowerText.includes(word)) aggression += 30
  })

  stressWords.forEach((word) => {
    if (lowerText.includes(word)) stress += 25
  })

  positiveWords.forEach((word) => {
    if (lowerText.includes(word)) positivity += 25
  })

  // –ê–Ω–∞–ª–∏–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  const exclamationCount = (text.match(/!/g) || []).length
  if (exclamationCount > 2) stress += exclamationCount * 15

  const upperCaseRatio = (text.match(/[–ê-–ØA-Z]/g) || []).length / text.length
  if (upperCaseRatio > 0.5) aggression += 20

  const toxicity = Math.min(100, aggression * 0.8 + stress * 0.4)
  const maxScore = Math.max(aggression, stress, positivity)

  let dominantEmotion = "neutral"
  if (aggression === maxScore && aggression > 20) dominantEmotion = "aggression"
  else if (stress === maxScore && stress > 20) dominantEmotion = "stress"
  else if (positivity === maxScore && positivity > 20) dominantEmotion = "positivity"

  let severity: EmotionAnalysis["severity"] = "low"
  if (toxicity > 85) severity = "critical"
  else if (toxicity > 65) severity = "high"
  else if (maxScore > 35) severity = "medium"

  return {
    emotion: dominantEmotion,
    confidence: maxScore,
    severity,
    categories: {
      aggression,
      stress,
      sarcasm: 0,
      toxicity,
      positivity,
    },
    modelUsed: "local-fallback",
    originalMessage: text,
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function analyzeEmotion(text: string): Promise<EmotionAnalysis> {
  const modelPreference = process.env.EMOTION_MODEL || "local"

  console.log(`[–ê–ù–ê–õ–ò–ó] –¢–µ–∫—Å—Ç: "${text.substring(0, 50)}..." | –ú–æ–¥–µ–ª—å: ${modelPreference}`)

  switch (modelPreference) {
    case "huggingface":
      return await analyzeEmotionWithHuggingFace(text)
    case "local":
      return await analyzeEmotionLocal(text)
    default:
      return await analyzeEmotionLocal(text)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR
async function notifyHR(chatId: number, incident: any) {
  if (!MODERATION_SETTINGS.hrChatId) return

  const message = `üö® *–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ*

üìç *–ß–∞—Ç:* ${chatId}
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @${incident.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
‚ö†Ô∏è *–¢–∏–ø:* ${incident.emotion}
üìä *–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:* ${incident.severity}
ü§ñ *–ú–æ–¥–µ–ª—å:* ${incident.modelUsed}
üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* "${incident.message}"

*–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:*
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏—è: ${incident.categories.aggression}%
‚Ä¢ –°—Ç—Ä–µ—Å—Å: ${incident.categories.stress}%
‚Ä¢ –°–∞—Ä–∫–∞–∑–º: ${incident.categories.sarcasm}%
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${incident.categories.toxicity}%

üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}

#–∏–Ω—Ü–∏–¥–µ–Ω—Ç #–º–æ–¥–µ—Ä–∞—Ü–∏—è #${incident.modelUsed}`

  try {
    await bot.api.sendMessage(MODERATION_SETTINGS.hrChatId, message, {
      parse_mode: "Markdown",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR:", error)
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
bot.command("start", async (ctx) => {
  const modelInfo = process.env.EMOTION_MODEL || "local"
  const welcomeMessage = `ü§ñ *EmoBot - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ ${modelInfo === "openai" ? "GPT-4" : modelInfo === "huggingface" ? "RuBERT" : "–ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"}
‚Ä¢ ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è HR

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/report - –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
/model - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
/help - –ü–æ–º–æ—â—å

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`

  await ctx.reply(welcomeMessage, { parse_mode: "Markdown" })
})

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
bot.command("stats", async (ctx) => {
  const chatId = ctx.chat?.id
  if (!chatId) return

  const stats = chatStats.get(chatId)
  if (!stats) {
    await ctx.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.")
    return
  }

  const totalMessages = stats.totalMessages
  const emotions = stats.emotionStats
  const incidents = stats.incidents.length

  const emotionPercentages = Object.entries(emotions)
    .map(([emotion, count]) => ({
      emotion,
      percentage: Math.round((count / totalMessages) * 100),
    }))
    .sort((a, b) => b.percentage - a.percentage)

  const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞*

üìù *–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* ${totalMessages}
‚ö†Ô∏è *–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:* ${incidents}
ü§ñ *–ú–æ–¥–µ–ª—å:* ${process.env.EMOTION_MODEL || "local"}

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π:*
${emotionPercentages
  .map(({ emotion, percentage }) => {
    const emoji =
      emotion === "aggression"
        ? "üò°"
        : emotion === "stress"
          ? "üò∞"
          : emotion === "sarcasm"
            ? "üòè"
            : emotion === "positivity"
              ? "üòä"
              : "üòê"
    return `${emoji} ${emotion}: ${percentage}%`
  })
  .join("\n")}

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º:*
${
  Array.from(stats.userRisks.values())
    .filter((user) => user.riskLevel === "high")
    .map((user) => `‚ö†Ô∏è @${user.username || user.userId} (${user.incidents} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤)`)
    .join("\n") || "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"
}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString("ru-RU")}`

  await ctx.reply(statsMessage, { parse_mode: "Markdown" })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id
  const userId = ctx.from?.id
  const username = ctx.from?.username
  const text = ctx.message.text
  const chatTitle = ctx.chat.type === "group" || ctx.chat.type === "supergroup" ? ctx.chat.title : undefined

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
  if (!chatStats.has(chatId)) {
    chatStats.set(chatId, {
      totalMessages: 0,
      emotionStats: {},
      userRisks: new Map(),
      incidents: [],
    })
  }

  const stats = chatStats.get(chatId)!
  stats.totalMessages++

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
    const analysis = await analyzeEmotion(text)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–π
    stats.emotionStats[analysis.emotion] = (stats.emotionStats[analysis.emotion] || 0) + 1

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
    const isIncident = analysis.severity === "high" || analysis.severity === "critical"

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateGlobalStats({
      chatId,
      chatTitle,
      userId: userId!,
      username,
      emotion: analysis.emotion,
      analysis,
      isIncident,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (userId) {
      const userRisk = stats.userRisks.get(userId) || {
        userId,
        username,
        riskLevel: "low" as const,
        incidents: 0,
      }

      if (isIncident) {
        userRisk.incidents++
        userRisk.lastIncident = new Date()

        if (userRisk.incidents >= 5) userRisk.riskLevel = "high"
        else if (userRisk.incidents >= 2) userRisk.riskLevel = "medium"

        const incident = {
          id: Date.now().toString(),
          userId,
          message: text,
          emotion: analysis.emotion,
          severity: analysis.severity,
          timestamp: new Date(),
        }
        stats.incidents.push(incident)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º HR –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        if (analysis.severity === "critical" && MODERATION_SETTINGS.notifyHR) {
          await notifyHR(chatId, {
            ...incident,
            username,
            categories: analysis.categories,
            modelUsed: analysis.modelUsed,
          })
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        if (MODERATION_SETTINGS.autoBlock && analysis.categories.toxicity > MODERATION_SETTINGS.thresholds.toxicity) {
          try {
            await ctx.deleteMessage()
            await ctx.reply(
              `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ–±—â–µ–Ω–∏—è (—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${Math.round(analysis.categories.toxicity)}%).`,
            )
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
          }
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (analysis.severity === "high") {
          await ctx.reply(
            `‚ö†Ô∏è @${username || userId}, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ! üòä`,
            { reply_to_message_id: ctx.message.message_id },
          )
        }
      }

      stats.userRisks.set(userId, userRisk)
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    console.log(
      `[${new Date().toISOString()}] Chat: ${chatId}, User: ${userId}, Emotion: ${analysis.emotion}, Confidence: ${analysis.confidence}%, Model: ${analysis.modelUsed}`,
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π:", error)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
bot.on("my_chat_member", async (ctx) => {
  const update = ctx.update.my_chat_member
  if (update.new_chat_member.status === "member" || update.new_chat_member.status === "administrator") {
    const modelInfo = process.env.EMOTION_MODEL || "local"
    const welcomeMessage = `ü§ñ *EmoBot –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É!*

–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –ø–æ–º–æ—â—å—é ${modelInfo === "openai" ? "GPT-4" : modelInfo === "huggingface" ? "RuBERT" : "–ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"}.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∏—Ä—É—é —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üìà –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.

*–í–∞–∂–Ω–æ:* –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏.`

    await ctx.reply(welcomeMessage, { parse_mode: "Markdown" })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err)
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook handler
export const POST = webhookCallback(bot, "std/http")
