import { Bot, webhookCallback } from "grammy";
import { updateGlobalStats } from "../admin/stats/route";
import { advancedNLPAnalysis } from "@/lib/nlp-models";
import { chatStats } from "@/lib/chatStats"; // Declare the variable before using it

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN || "");

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface EmotionAnalysis {
  emotion: string;
  confidence: number;
  severity: "low" | "medium" | "high" | "critical";
  categories: {
    aggression: number;
    stress: number;
    sarcasm: number;
    toxicity: number;
    positivity: number;
  };
  modelUsed: string[];
  originalMessage?: string;
  correctedText?: string;
  normalizedText?: string;
  slangDetected?: string[];
  errorsFixed?: string[];
  detectedLanguage?: string;
}

interface UserRisk {
  userId: number;
  username?: string;
  riskLevel: "low" | "medium" | "high";
  incidents: number;
  lastIncident?: Date;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const MODERATION_SETTINGS = {
  thresholds: {
    aggression: 75,
    stress: 80,
    sarcasm: 70,
    toxicity: 85,
  },
  autoBlock: true,
  notifyHR: true,
  hrChatId: process.env.HR_CHAT_ID
    ? Number.parseInt(process.env.HR_CHAT_ID)
    : null,
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º NLP
async function analyzeEmotion(text: string): Promise<EmotionAnalysis> {
  const modelPreference = process.env.EMOTION_MODEL || "advanced";

  console.log(`[–ê–ù–ê–õ–ò–ó] –¢–µ–∫—Å—Ç: "${text}" | –ú–æ–¥–µ–ª—å: ${modelPreference}`);

  if (modelPreference === "advanced") {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π NLP –∞–Ω–∞–ª–∏–∑
      const nlpResult = await advancedNLPAnalysis(text);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      let severity: EmotionAnalysis["severity"] = "low";
      const toxicity = nlpResult.sentiment.categories.toxicity;
      const aggression = nlpResult.sentiment.categories.aggression;

      if (toxicity > 85 || aggression > 80) severity = "critical";
      else if (toxicity > 65 || nlpResult.sentiment.confidence > 60)
        severity = "high";
      else if (nlpResult.sentiment.confidence > 35) severity = "medium";

      const result = {
        emotion: nlpResult.sentiment.emotion,
        confidence: nlpResult.sentiment.confidence,
        severity,
        categories: nlpResult.sentiment.categories,
        modelUsed: nlpResult.modelUsed,
        originalMessage: text,
        correctedText: nlpResult.correctedText,
        normalizedText: nlpResult.normalizedText,
        slangDetected: nlpResult.slangDetected,
        errorsFixed: nlpResult.errorsFixed,
        detectedLanguage: nlpResult.detectedLanguage,
      };

      console.log(`[–ê–ù–ê–õ–ò–ó] –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è "${text}":`, {
        emotion: result.emotion,
        confidence: result.confidence,
        severity: result.severity,
        categories: result.categories,
        modelUsed: result.modelUsed,
      });

      return result;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error);
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
      return await analyzeEmotionLocal(text);
    }
  } else {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
    return await analyzeEmotionLocal(text);
  }
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ fallback
async function analyzeEmotionLocal(text: string): Promise<EmotionAnalysis> {
  console.log(`[LOCAL ANALYSIS] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: "${text}"`);

  const lowerText = text.toLowerCase();

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Å–ª–æ–≤–∞—Ä–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
  const aggressionWords = [
    "–¥–µ–±–∏–ª", // —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–æ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
    "–¥—É—Ä–∞–∫",
    "–∏–¥–∏–æ—Ç",
    "—Ç—É–ø–æ–π",
    "–∫—Ä–µ—Ç–∏–Ω",
    "–º—É–¥–∞–∫",
    "–∫–æ–∑–µ–ª",
    "—É—Ä–æ–¥",
    "–±—Ä–µ–¥",
    "–µ—Ä—É–Ω–¥–∞",
    "—Ö–µ—Ä–Ω—è",
    "—Ñ–∏–≥–Ω—è",
    "–≥–æ–≤–Ω–æ",
    "–¥–µ—Ä—å–º–æ",
    "–∑–∞—Ç–∫–Ω–∏—Å—å",
    "–æ—Ç–≤–∞–ª–∏",
    "–ø–æ—à–µ–ª",
    "–¥–æ—Å—Ç–∞–ª",
    "–Ω–∞–¥–æ–µ–ª",
    "–±–µ—Å–∏—Ç",
    "–∑–∞–¥–æ–ª–±–∞–ª",
    "–∑–∞–∫–æ–ª–µ–±–∞–ª",
    "–∑–∞–º—É—á–∏–ª",
    "—Å—É–∫–∞",
    "–±–ª—è–¥—å",
    "–ø–∏–¥–æ—Ä",
    "–≥–µ–π",
    "–ª–æ—Ö",
    "—á–º–æ",
    "—É–µ–±–æ–∫",
  ];

  const stressWords = [
    "—Å—Ä–æ—á–Ω–æ",
    "–±—ã—Å—Ç—Ä–µ–µ",
    "–æ–ø—è—Ç—å",
    "–Ω–µ —É—Å–ø–µ–≤–∞–µ–º",
    "–≥–æ—Ä–∏—Ç",
    "–ø–æ–∂–∞—Ä",
    "–∞–≤—Ä–∞–ª",
    "–∑–∞–≤–∞–ª",
    "–¥–µ–¥–ª–∞–π–Ω",
    "–≤—á–µ—Ä–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ",
    "–∫–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è",
    "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "—Å–ª–æ–º–∞–ª–æ—Å—å",
    "–≥–ª—é—á–∏—Ç",
    "–ø–∞–¥–∞–µ—Ç",
    "–∫—Ä–∞—à–∏—Ç—Å—è",
    "–≤–∏—Å–Ω–µ—Ç",
    "–ª–∞–≥–∞–µ—Ç",
    "–ø–∞–Ω–∏–∫–∞",
    "—É–∂–∞—Å",
    "–∫–æ—à–º–∞—Ä",
    "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞",
    "–ø—Ä–æ–≤–∞–ª",
  ];

  const positiveWords = [
    "—Å–ø–∞—Å–∏–±–æ",
    "–æ—Ç–ª–∏—á–Ω–æ",
    "—Ö–æ—Ä–æ—à–æ",
    "–º–æ–ª–æ–¥–µ—Ü",
    "—Å—É–ø–µ—Ä",
    "—Ä–∞–¥",
    "–∫–ª–∞—Å—Å–Ω–æ",
    "–∫—Ä—É—Ç–æ",
    "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ",
    "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
    "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ",
    "—á—É–¥–µ—Å–Ω–æ",
    "–±–ª–∞–≥–æ–¥–∞—Ä—é",
    "—Ü–µ–Ω—é",
    "—É–≤–∞–∂–∞—é",
    "–ø–æ–¥–¥–µ—Ä–∂—É",
    "—Å–æ–≥–ª–∞—Å–µ–Ω",
    "–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
    "—Ç–æ—á–Ω–æ",
    "–∑–¥–æ—Ä–æ–≤–æ",
    "–±—Ä–∞–≤–æ",
    "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ",
  ];

  let aggression = 0;
  let stress = 0;
  let positivity = 0;
  let sarcasm = 0;

  // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
  aggressionWords.forEach((word) => {
    if (lowerText.includes(word)) {
      aggression += 40; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 30 –¥–æ 40
      console.log(
        `[LOCAL] –ù–∞–π–¥–µ–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ: "${word}" –≤ —Ç–µ–∫—Å—Ç–µ: "${text}"`
      );
    }
  });

  stressWords.forEach((word) => {
    if (lowerText.includes(word)) {
      stress += 35; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 25 –¥–æ 35
      console.log(`[LOCAL] –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    }
  });

  positiveWords.forEach((word) => {
    if (lowerText.includes(word)) {
      positivity += 30; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 25 –¥–æ 30
      console.log(`[LOCAL] –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ: ${word}`);
    }
  });

  // –ê–Ω–∞–ª–∏–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  const exclamationCount = (text.match(/!/g) || []).length;
  if (exclamationCount > 1) {
    stress += exclamationCount * 20; // –£–≤–µ–ª–∏—á–∏–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å
    console.log(`[LOCAL] –ù–∞–π–¥–µ–Ω–æ ${exclamationCount} –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤`);
  }

  const upperCaseRatio = (text.match(/[–ê-–ØA-Z]/g) || []).length / text.length;
  if (upperCaseRatio > 0.3) {
    // –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ —Å 0.5 –¥–æ 0.3
    aggression += 25;
    console.log(`[LOCAL] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ö–ê–ü–°: ${Math.round(upperCaseRatio * 100)}%`);
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  aggression = Math.min(100, aggression);
  stress = Math.min(100, stress);
  positivity = Math.min(100, positivity);
  sarcasm = Math.min(100, sarcasm);

  const toxicity = Math.min(100, aggression * 0.8 + stress * 0.4);
  const maxScore = Math.max(aggression, stress, positivity, sarcasm);

  let dominantEmotion = "neutral";
  let confidence = maxScore;

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
  if (aggression >= 25) {
    // –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ —Å 20 –¥–æ 15
    dominantEmotion = "aggression";
    confidence = aggression;
  } else if (stress >= 25) {
    dominantEmotion = "stress";
    confidence = stress;
  } else if (positivity >= 25) {
    dominantEmotion = "positivity";
    confidence = positivity;
  } else if (sarcasm >= 25) {
    dominantEmotion = "sarcasm";
    confidence = sarcasm;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
  let severity: EmotionAnalysis["severity"] = "low";
  if (aggression >= 40 || toxicity >= 60) {
    severity = "critical";
  } else if (aggression >= 25 || stress >= 30 || toxicity >= 40) {
    severity = "high";
  } else if (maxScore >= 20) {
    severity = "medium";
  }

  const result = {
    emotion: dominantEmotion,
    confidence: confidence,
    severity,
    categories: {
      aggression,
      stress,
      sarcasm,
      toxicity,
      positivity,
    },
    modelUsed: ["local-enhanced"],
    originalMessage: text,
  };

  console.log(`[LOCAL] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:`, result);
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR
async function notifyHR(chatId: number, incident: any) {
  if (!MODERATION_SETTINGS.hrChatId) return;

  const message = `üö® *–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ*

üìç *–ß–∞—Ç:* ${chatId}
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @${incident.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
‚ö†Ô∏è *–¢–∏–ø:* ${incident.emotion}
üìä *–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:* ${incident.severity}
ü§ñ *–ú–æ–¥–µ–ª–∏:* ${incident.modelUsed?.join(", ") || "local"}

üìù *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*
"${incident.originalMessage || incident.message}"

${
  incident.correctedText && incident.correctedText !== incident.originalMessage
    ? `üìù *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*
"${incident.correctedText}"`
    : ""
}

${
  incident.normalizedText && incident.normalizedText !== incident.correctedText
    ? `üìù *–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*
"${incident.normalizedText}"`
    : ""
}

${
  incident.slangDetected && incident.slangDetected.length > 0
    ? `üó£Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥:*
${incident.slangDetected.join(", ")}`
    : ""
}

${
  incident.errorsFixed && incident.errorsFixed.length > 0
    ? `‚úèÔ∏è *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:*
${incident.errorsFixed.join(", ")}`
    : ""
}

*–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π:*
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏—è: ${incident.categories?.aggression || 0}%
‚Ä¢ –°—Ç—Ä–µ—Å—Å: ${incident.categories?.stress || 0}%
‚Ä¢ –°–∞—Ä–∫–∞–∑–º: ${incident.categories?.sarcasm || 0}%
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${incident.categories?.toxicity || 0}%
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤: ${incident.categories?.positivity || 0}%

üåê *–Ø–∑—ã–∫:* ${incident.detectedLanguage || "ru"}

üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}

#–∏–Ω—Ü–∏–¥–µ–Ω—Ç #–º–æ–¥–µ—Ä–∞—Ü–∏—è #nlp #${incident.modelUsed?.join("_") || "local"}`;

  try {
    await bot.api.sendMessage(MODERATION_SETTINGS.hrChatId, message, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR:", error);
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  const modelInfo = process.env.EMOTION_MODEL || "advanced";
  const welcomeMessage = `ü§ñ *EmoBot - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ NLP.

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ${
    modelInfo === "advanced" ? "–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ AI –º–æ–¥–µ–ª–∏" : "–ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"
  }
‚Ä¢ ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –æ—à–∏–±–æ–∫
‚Ä¢ üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–µ–Ω–≥–∞ –∏ –∂–∞—Ä–≥–æ–Ω–∞
‚Ä¢ üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/nlp_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NLP –∞–Ω–∞–ª–∏–∑–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/report - –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
/model - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
/help - –ü–æ–º–æ—â—å

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`;

  await ctx.reply(welcomeMessage, { parse_mode: "Markdown" });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NLP
bot.command("nlp_stats", async (ctx) => {
  try {
    const { getNLPStats } = await import("@/lib/nlp-models");
    const stats = await getNLPStats();

    if (!stats) {
      await ctx.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NLP –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.");
      return;
    }

    const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ NLP –∞–Ω–∞–ª–∏–∑–∞*

üìù *–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤:* ${stats.totalAnalyses}
üéØ *–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:* ${stats.averageConfidence.toFixed(1)}%

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤:*
${Object.entries(stats.languageDistribution)
  .map(([lang, count]) => `üåê ${lang}: ${count}`)
  .join("\n")}

*–¢–æ–ø —Å–ª–µ–Ω–≥–∞:*
${Object.entries(stats.slangUsage)
  .sort(([, a], [, b]) => (b as number) - (a as number))
  .slice(0, 5)
  .map(([slang, count]) => `üó£Ô∏è ${slang}: ${count}`)
  .join("\n")}

*–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:*
${Object.entries(stats.errorTypes)
  .sort(([, a], [, b]) => (b as number) - (a as number))
  .slice(0, 5)
  .map(([error, count]) => `‚úèÔ∏è ${error}: ${count}`)
  .join("\n")}

üïê *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*`;

    await ctx.reply(statsMessage, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NLP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NLP");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /model - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
bot.command("model", async (ctx) => {
  const modelInfo = process.env.EMOTION_MODEL || "advanced";

  const modelDescriptions = {
    advanced: `üß† *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π NLP –∞–Ω–∞–ª–∏–∑*
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ (RuSpellRuBERT)
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (XLM-RoBERTa)
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (3+ –º–æ–¥–µ–ª–∏)
‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Å–∞—Ä–∫–∞–∑–º–∞ (RoBERTa-Irony)
‚Ä¢ –û–≥—Ä–æ–º–Ω–∞—è –±–∞–∑–∞ —Å–ª–µ–Ω–≥–∞ (5000+ –≤—ã—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞`,

    huggingface: `ü§ó *RuBERT (Hugging Face)*
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –•–æ—Ä–æ—à–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å`,

    local: `üíª *–õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã*
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–º–æ–¥–∑–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏`,
  };

  const currentModel =
    modelDescriptions[modelInfo as keyof typeof modelDescriptions] ||
    modelDescriptions.advanced;

  await ctx.reply(
    `üìä *–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞:*

${currentModel}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${
      modelInfo === "advanced"
        ? "95%"
        : modelInfo === "huggingface"
        ? "87%"
        : "75%"
    }
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ${
      modelInfo === "advanced"
        ? "3-5 —Å–µ–∫"
        : modelInfo === "huggingface"
        ? "1-2 —Å–µ–∫"
        : "<1 —Å–µ–∫"
    }
‚Ä¢ –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π, English, Deutsch, Fran√ßais
‚Ä¢ –°–ª–µ–Ω–≥: ${modelInfo === "advanced" ? "5000+ –≤—ã—Ä–∞–∂–µ–Ω–∏–π" : "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä"}

*–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:*
${
  modelInfo === "advanced"
    ? `‚Ä¢ RuSpellRuBERT (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫)
‚Ä¢ XLM-RoBERTa (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)
‚Ä¢ RuBERT-Emotion (–∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π)
‚Ä¢ RoBERTa-Irony (–¥–µ—Ç–µ–∫—Ü–∏—è —Å–∞—Ä–∫–∞–∑–º–∞)
‚Ä¢ Custom Slang DB (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–µ–Ω–≥–∞)`
    : `‚Ä¢ ${
        modelInfo === "huggingface" ? "RuBERT-Emotion" : "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏"
      }`
}

–î–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
    { parse_mode: "Markdown" }
  );
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
bot.command("stats", async (ctx) => {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  const stats = chatStats.get(chatId);
  if (!stats) {
    await ctx.reply(
      "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç."
    );
    return;
  }

  const totalMessages = stats.totalMessages;
  const emotions = stats.emotionStats;
  const incidents = stats.incidents.length;

  const emotionPercentages = Object.entries(emotions)
    .map(([emotion, count]) => ({
      emotion,
      percentage: Math.round((count / totalMessages) * 100),
    }))
    .sort((a, b) => b.percentage - a.percentage);

  const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞*

üìù *–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* ${totalMessages}
‚ö†Ô∏è *–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:* ${incidents}
ü§ñ *–ú–æ–¥–µ–ª—å:* ${process.env.EMOTION_MODEL || "advanced"}

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π:*
${emotionPercentages
  .map(({ emotion, percentage }) => {
    const emoji =
      emotion === "aggression"
        ? "üò°"
        : emotion === "stress"
        ? "üò∞"
        : emotion === "sarcasm"
        ? "üòè"
        : emotion === "positivity"
        ? "üòä"
        : "üòê";
    return `${emoji} ${emotion}: ${percentage}%`;
  })
  .join("\n")}

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º:*
${
  Array.from(stats.userRisks.values())
    .filter((user) => user.riskLevel === "high")
    .map(
      (user) =>
        `‚ö†Ô∏è @${user.username || user.userId} (${user.incidents} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤)`
    )
    .join("\n") || "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"
}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString("ru-RU")}`;

  await ctx.reply(statsMessage, { parse_mode: "Markdown" });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id;
  const username = ctx.from?.username;
  const text = ctx.message.text;
  const chatTitle =
    ctx.chat.type === "group" || ctx.chat.type === "supergroup"
      ? ctx.chat.title
      : undefined;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return;

  console.log(
    `[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –≤ —á–∞—Ç–µ ${chatId}`
  );

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const stats = chatStats.get(chatId) || {
    totalMessages: 0,
    emotionStats: {},
    userRisks: new Map<number, UserRisk>(),
    incidents: [],
  };
  try {
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
    console.log(`[WEBHOOK] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
    const analysis = await analyzeEmotion(text);
    console.log(`[WEBHOOK] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:`, analysis);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–π
    stats.emotionStats[analysis.emotion] =
      (stats.emotionStats[analysis.emotion] || 0) + 1;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
    const isIncident =
      analysis.severity === "high" || analysis.severity === "critical";
    console.log(
      `[WEBHOOK] –ò–Ω—Ü–∏–¥–µ–Ω—Ç: ${isIncident}, –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${analysis.severity}`
    );

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateGlobalStats({
      chatId,
      chatTitle,
      userId: userId!,
      username,
      emotion: analysis.emotion,
      analysis,
      isIncident,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (userId) {
      const userRisk = stats.userRisks.get(userId) || {
        userId,
        username,
        riskLevel: "low" as const,
        incidents: 0,
      };

      if (isIncident) {
        userRisk.incidents++;
        userRisk.lastIncident = new Date();

        if (userRisk.incidents >= 5) userRisk.riskLevel = "high";
        else if (userRisk.incidents >= 2) userRisk.riskLevel = "medium";

        const incident = {
          id: Date.now().toString(),
          userId,
          message: text,
          emotion: analysis.emotion,
          severity: analysis.severity,
          timestamp: new Date(),
        };
        stats.incidents.push(incident);

        console.log(`[WEBHOOK] –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç:`, incident);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º HR –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        if (analysis.severity === "critical" && MODERATION_SETTINGS.notifyHR) {
          await notifyHR(chatId, {
            ...incident,
            username,
            originalMessage: analysis.originalMessage,
            categories: analysis.categories,
            modelUsed: analysis.modelUsed,
          });
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        if (
          MODERATION_SETTINGS.autoBlock &&
          analysis.categories.toxicity > MODERATION_SETTINGS.thresholds.toxicity
        ) {
          try {
            await ctx.deleteMessage();
            await ctx.reply(
              `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ–±—â–µ–Ω–∏—è (—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${Math.round(
                analysis.categories.toxicity
              )}%).`
            );
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
          }
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (analysis.severity === "high") {
          await ctx.reply(
            `‚ö†Ô∏è @${
              username || userId
            }, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ! üòä`,
            {
              reply_to_message_id: ctx.message.message_id,
            }
          );
        }
      }

      stats.userRisks.set(userId, userRisk);
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log(
      `[WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: Chat: ${chatId}, User: ${userId}, Emotion: ${analysis.emotion}, Confidence: ${analysis.confidence}%, Severity: ${analysis.severity}`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
bot.on("my_chat_member", async (ctx) => {
  const update = ctx.update.my_chat_member;
  if (
    update.new_chat_member.status === "member" ||
    update.new_chat_member.status === "administrator"
  ) {
    const modelInfo = process.env.EMOTION_MODEL || "advanced";
    const welcomeMessage = `ü§ñ *EmoBot –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É!*

–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –ø–æ–º–æ—â—å—é ${
      modelInfo === "advanced"
        ? "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI –º–æ–¥–µ–ª–µ–π"
        : modelInfo === "huggingface"
        ? "RuBERT"
        : "–ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
    }.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ ‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è—é –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –æ—à–∏–±–∫–∏
‚Ä¢ üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–µ–Ω–≥–∞ –∏ –∂–∞—Ä–≥–æ–Ω–∞
‚Ä¢ üåê –û–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∏—Ä—É—é —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üìà –í–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.

*–í–∞–∂–Ω–æ:* –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏.`;

    await ctx.reply(welcomeMessage, { parse_mode: "Markdown" });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook handler
export const POST = webhookCallback(bot, "std/http");
