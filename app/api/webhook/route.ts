import { Bot, webhookCallback } from "grammy"
import {
  upsertChat,
  upsertUser,
  saveMessage,
  saveEmotionAnalysis,
  createIncident,
  getModerationSettings,
  getChatStats,
} from "@/lib/database"

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN || "")

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface EmotionAnalysis {
  emotion: string
  confidence: number
  severity: "low" | "medium" | "high" | "critical"
  categories: {
    aggression: number
    stress: number
    sarcasm: number
    toxicity: number
    positivity: number
  }
  modelUsed: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI API
async function analyzeEmotionWithOpenAI(text: string): Promise<EmotionAnalysis> {
  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç–º–æ—Ü–∏–π –≤ —Ä—É—Å—Å–∫–∏—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö. 
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π JSON —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –æ—Ç 0 –¥–æ 100:
            {
              "aggression": —á–∏—Å–ª–æ,
              "stress": —á–∏—Å–ª–æ, 
              "sarcasm": —á–∏—Å–ª–æ,
              "toxicity": —á–∏—Å–ª–æ,
              "positivity": —á–∏—Å–ª–æ,
              "dominant_emotion": "—Å—Ç—Ä–æ–∫–∞",
              "confidence": —á–∏—Å–ª–æ,
              "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
            }`,
          },
          {
            role: "user",
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`,
          },
        ],
        temperature: 0.1,
        max_tokens: 200,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const result = await response.json()
    const content = result.choices[0].message.content
    const analysis = JSON.parse(content)

    let severity: EmotionAnalysis["severity"] = "low"
    if (analysis.toxicity > 85 || analysis.aggression > 80) severity = "critical"
    else if (analysis.toxicity > 65 || analysis.confidence > 60) severity = "high"
    else if (analysis.confidence > 35) severity = "medium"

    return {
      emotion: analysis.dominant_emotion,
      confidence: analysis.confidence,
      severity,
      categories: {
        aggression: analysis.aggression,
        stress: analysis.stress,
        sarcasm: analysis.sarcasm,
        toxicity: analysis.toxicity,
        positivity: analysis.positivity,
      },
      modelUsed: "gpt-4",
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ OpenAI API:", error)
    return await analyzeEmotionLocal(text)
  }
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ fallback
async function analyzeEmotionLocal(text: string): Promise<EmotionAnalysis> {
  const lowerText = text.toLowerCase()

  const aggressionWords = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–±—Ä–µ–¥", "–µ—Ä—É–Ω–¥–∞"]
  const stressWords = ["—Å—Ä–æ—á–Ω–æ", "–±—ã—Å—Ç—Ä–µ–µ", "–æ–ø—è—Ç—å", "–Ω–µ —É—Å–ø–µ–≤–∞–µ–º", "–≥–æ—Ä–∏—Ç"]
  const positiveWords = ["—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–º–æ–ª–æ–¥–µ—Ü", "—Å—É–ø–µ—Ä"]

  let aggression = 0
  let stress = 0
  let positivity = 0

  aggressionWords.forEach((word) => {
    if (lowerText.includes(word)) aggression += 30
  })

  stressWords.forEach((word) => {
    if (lowerText.includes(word)) stress += 25
  })

  positiveWords.forEach((word) => {
    if (lowerText.includes(word)) positivity += 20
  })

  const exclamationCount = (text.match(/!/g) || []).length
  if (exclamationCount > 2) stress += exclamationCount * 15

  const upperCaseRatio = (text.match(/[–ê-–ØA-Z]/g) || []).length / text.length
  if (upperCaseRatio > 0.5) aggression += 20

  const toxicity = Math.min(100, aggression * 0.8 + stress * 0.4)
  const maxScore = Math.max(aggression, stress, positivity)

  let dominantEmotion = "neutral"
  if (aggression === maxScore && aggression > 20) dominantEmotion = "aggression"
  else if (stress === maxScore && stress > 20) dominantEmotion = "stress"
  else if (positivity === maxScore && positivity > 20) dominantEmotion = "positivity"

  let severity: EmotionAnalysis["severity"] = "low"
  if (toxicity > 85) severity = "critical"
  else if (toxicity > 65) severity = "high"
  else if (maxScore > 35) severity = "medium"

  return {
    emotion: dominantEmotion,
    confidence: maxScore,
    severity,
    categories: {
      aggression,
      stress,
      sarcasm: 0,
      toxicity,
      positivity,
    },
    modelUsed: "local-fallback",
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function analyzeEmotion(text: string): Promise<EmotionAnalysis> {
  const modelPreference = process.env.EMOTION_MODEL || "openai"

  console.log(`[–ê–ù–ê–õ–ò–ó] –¢–µ–∫—Å—Ç: "${text.substring(0, 50)}..." | –ú–æ–¥–µ–ª—å: ${modelPreference}`)

  if (modelPreference === "openai") {
    return await analyzeEmotionWithOpenAI(text)
  } else {
    return await analyzeEmotionLocal(text)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR
async function notifyHR(chatId: number, incident: any) {
  const settings = await getModerationSettings(chatId)
  if (!settings?.notify_hr || !settings.hr_chat_id) return

  const message = `üö® *–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ*

üìç *–ß–∞—Ç:* ${chatId}
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @${incident.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
‚ö†Ô∏è *–¢–∏–ø:* ${incident.emotion}
üìä *–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:* ${incident.severity}
üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* "${incident.message}"

*–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:*
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏—è: ${incident.categories.aggression}%
‚Ä¢ –°—Ç—Ä–µ—Å—Å: ${incident.categories.stress}%
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${incident.categories.toxicity}%

üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}`

  try {
    await bot.api.sendMessage(settings.hr_chat_id, message, {
      parse_mode: "Markdown",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR:", error)
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  const welcomeMessage = `ü§ñ *EmoBot - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ GPT-4
‚Ä¢ ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ

*–ö–æ–º–∞–Ω–¥—ã:*
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/help - –ü–æ–º–æ—â—å

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`

  await ctx.reply(welcomeMessage, { parse_mode: "Markdown" })
})

// –í –∫–æ–º–∞–Ω–¥–µ /stats –∑–∞–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
bot.command("stats", async (ctx) => {
  const chatId = ctx.chat?.id
  if (!chatId) return

  try {
    const stats = await getChatStats(chatId, 7)

    if (stats.totalAnalyses === 0) {
      await ctx.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç.")
      return
    }

    const emotionPercentages = Object.entries(stats.emotionDistribution)
      .map(([emotion, percentage]) => ({ emotion, percentage }))
      .sort((a, b) => b.percentage - a.percentage)

    const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (7 –¥–Ω–µ–π)*

üìù *–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* ${stats.totalAnalyses}
‚ö†Ô∏è *–û—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:* ${stats.openIncidents}
üòä *–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å:* ${stats.avgPositivity}%
‚ò†Ô∏è *–°—Ä–µ–¥–Ω—è—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å:* ${stats.avgToxicity}%

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π:*
${emotionPercentages
  .map(({ emotion, percentage }) => {
    const emoji = emotion === "aggression" ? "üò°" : emotion === "stress" ? "üò∞" : emotion === "positivity" ? "üòä" : "üòê"
    return `${emoji} ${emotion}: ${percentage}%`
  })
  .join("\n")}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString("ru-RU")}`

    await ctx.reply(statsMessage, { parse_mode: "Markdown" })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error)
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id
  const userId = ctx.from?.id
  const username = ctx.from?.username
  const text = ctx.message.text
  const messageId = ctx.message.message_id

  if (text.startsWith("/")) return

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await upsertChat({
      id: chatId,
      title: ctx.chat.title || null,
      type: ctx.chat.type,
      member_count: 0,
    })

    if (userId) {
      await upsertUser({
        id: userId,
        username: username || null,
        first_name: ctx.from?.first_name || null,
        last_name: ctx.from?.last_name || null,
        is_bot: ctx.from?.is_bot || false,
        language_code: ctx.from?.language_code || null,
      })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const savedMessage = await saveMessage({
      message_id: messageId,
      chat_id: chatId,
      user_id: userId!,
      text,
    })

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
    const analysis = await analyzeEmotion(text)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    const savedAnalysis = await saveEmotionAnalysis({
      message_id: savedMessage.id,
      emotion: analysis.emotion,
      confidence: analysis.confidence,
      severity: analysis.severity,
      aggression_score: analysis.categories.aggression,
      stress_score: analysis.categories.stress,
      sarcasm_score: analysis.categories.sarcasm,
      toxicity_score: analysis.categories.toxicity,
      positivity_score: analysis.categories.positivity,
      model_used: analysis.modelUsed,
    })

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (analysis.severity === "high" || analysis.severity === "critical") {
      const incident = await createIncident({
        chat_id: chatId,
        user_id: userId!,
        message_id: savedMessage.id,
        emotion_analysis_id: savedAnalysis.id,
        severity: analysis.severity,
        status: "open",
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º HR –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
      if (analysis.severity === "critical") {
        await notifyHR(chatId, {
          username,
          emotion: analysis.emotion,
          severity: analysis.severity,
          message: text,
          categories: analysis.categories,
        })
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      const settings = await getModerationSettings(chatId)

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
      if (settings?.auto_block && analysis.categories.toxicity > (settings.toxicity_threshold || 85)) {
        try {
          await ctx.deleteMessage()
          await ctx.reply(
            `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ–±—â–µ–Ω–∏—è (—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: ${Math.round(analysis.categories.toxicity)}%).`,
          )
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
        }
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (analysis.severity === "high") {
        await ctx.reply(
          `‚ö†Ô∏è @${username || userId}, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ! üòä`,
          { reply_to_message_id: ctx.message.message_id },
        )
      }
    }

    console.log(
      `[${new Date().toISOString()}] Chat: ${chatId}, User: ${userId}, Emotion: ${analysis.emotion}, Confidence: ${analysis.confidence}%, Model: ${analysis.modelUsed}`,
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
bot.on("my_chat_member", async (ctx) => {
  const update = ctx.update.my_chat_member
  if (update.new_chat_member.status === "member" || update.new_chat_member.status === "administrator") {
    const welcomeMessage = `ü§ñ *EmoBot –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É!*

–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é GPT-4
‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∏—Ä—É—é —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üìà –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`

    await ctx.reply(welcomeMessage, { parse_mode: "Markdown" })
  }
})

bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err)
})

export const POST = webhookCallback(bot, "std/http")
